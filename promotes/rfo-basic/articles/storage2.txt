
http://gadgets.ndtv.com/mobiles/news/android-50-lollipop-brings-full-sd-card-access-for-third-party-apps-616420

http://www.techtimes.com/articles/19510/20141106/android-5-0-lollipop-comes-with-better-sd-card-support-hoorah-google.htm

http://www.androidcentral.com/lollipop-brings-changes-way-your-sd-card-works-kind-youll

Somewhat official links here.

https://code.google.com/p/android/issues/detail?id=67570#c4444
http://developer.android.com/reference/android/support/v4/provider/DocumentFile.html

Been reading a bit. I don't think it's that clear-cut.

It seems Google had a sort of solution last year but it was too restrictive and still
upset some developers.
https://code.google.com/p/android/issues/detail?id=133681

It's not a new installation permission but an 'in-app' request.
i.e the app has to issue an intent ACTION_OPEN_DOCUMENT_TREE.

A tree picker then prompts the user with some 'registered roots'(?) to which 
the user picks a directory for access. He can even pick the root of the sdcard.
The app then gets granted access. Permanent access sounds a bit more trickier.
(I'm still not happy the way Google's done this).


Maybe the intent can be done by a shell already(?). If not then either a special
command is needed or maybe extend am.start. I just hope it's not something like an
automatic popup with every installation of basic!




--------------------------------------------------------------------------------

Storage Access Framework (SAF) with Android 4.4 KitKat allows third-party apps to get access to files with the user's consent for total SD card access to an app
on secondary storage.

DocumentsProvider

https://code.google.com/p/android/issues/detail?id=133681

ACTION_OPEN_DOCUMENT or ACTION_CREATE_DOCUMENT intents
Once the intent fires, the system picker goes to each registered provider and shows the user the matching content roots.
allow the user to select and return one or more existing documents.

i.e ACTION_PICK or ACTION_GET_CONTENT.


On Android 4.4 and higher, you have the additional option of using the ACTION_OPEN_DOCUMENT intent, which displays a picker UI controlled by the system that allows the user to browse all files.


Lollipop removes the restriction to app-specific directories with
ACTION_OPEN_DOCUMENT_TREE

With the new improved APIs, developers will have full access to SD card directories and files with only one consent of the user and the apps will be able to create directories for storage on an external storage card in a more sorted way than KitKat.
apps can be accessed without the need to ask permission repeatedly.

In other words, a developer can absolutely gain access to SD card directories and files. He can now declare a permission on installation to do something on the device storage, which includes removable storage.

Example
https://metactrl.com/docs/sdcard-on-lollipop/
=====
in addition, "If an app places a file into a folder returned by getExternalMediaDirs, it is essentially available to any other application to access via the MediaStore service. 
========================================================================================

Update #2
By request, here's the way Samsung has worked around the problem in their ICS builds for the SGS2:

/system/etc/permissions/platform.xml:
Code#
1 <permission name="android.permission.WRITE_EXTERNAL_STORAGE" >
2 <group gid="sdcard_rw" />
3 <group gid="media_rw" />
4 </permission>

You can manually do this too if you have root access.
http://forum.xda-developers.com/xperia-z2/help/write-sd-card-permissions-android-5-0-2-t3089933



Well, this is certainly an interesting way to go about working around the problem. What is happening here is that if you ask for the "WRITE_EXTERNAL_STORAGE" permission, you also get the "WRITE_MEDIA_STORAGE" permission - at no extra charge! It should be obvious that this is not in any way a proper solution to the issue.

What makes this even more interesting is that this means at least Samsung engineers are apparently well aware of the problem.

In the past, an app would request the "WRITE_EXTERNAL_STORAGE" permission, which would grant write access to all external storages (user/group "sdcard_rw"). This has apparently been changed to only grant write access to the primary external storage. A second permission has been introduced called "WRITE_MEDIA_STORAGE", which would grant access to the other external storages (user/group "media_rw").

The problem is, a third party will not actually be granted this permission, only system apps and apps provided by the device manufacturer will normally be granted this permission. There are exceptions, apparently on some devices third party apps will be granted this permission, but according to the AOSP sources, they're certainly not supposed to.










