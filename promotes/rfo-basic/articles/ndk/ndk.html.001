<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>




  
  <meta content="HTML Tidy for Linux/x86 (vers 25 March 2009), see www.w3.org" name="generator">

  
  <meta http-equiv="content-type" content="text/html; charset=us-ascii">

  
  <meta name="viewport" content="width=device-width, initial-scale=1.0"><title>ndk</title>
  

  
  
  <link rel="stylesheet" href="main.css" type="text/css"></head><body alink="#000099" link="#000099" vlink="#990099">
<br style="font-family: Helvetica,Arial,sans-serif;">

<big style="font-family: Helvetica,Arial,sans-serif;">Humpty Promotes -
<a href="articles.html">Project Articles</a> &gt;<small><br>
</small></big><br>

<br>

<big><big><span style="color: rgb(0, 0, 153);">Using NDK binaries with
rfo-Basic!</span></big></big>&nbsp; <small>(Sep 2015)<br>
</small>
<br>

<div style="text-align: left;"><a href="#hello">hello</a><br>
<a href="#What_is_NDK">What is NDK</a><br>
<div style="margin-left: 40px;"><a href="#Why_Use_It">Why Use it?</a><br>
<a href="#Simple_Interface">Simple Interface</a><br>
</div>
<a href="#Make_a_Binary">Make a Binary</a><br>
<a href="#Your_Basic_project">Your Basic! project</a><br>
Communication<br>
About PIE<br>
</div>

<br>

<small></small><br>

<span style="text-decoration: underline;"><a name="hello"></a>'hello
world' moment</span><br>

<big><big>T</big></big>he '<span style="color: rgb(0, 0, 153);">hello
world</span>'
moment. That wonderment and dis-belief that suspends you in time while
future possibilites fly around your head like flies, only happens a few
times in&nbsp; a programmer's&nbsp; lifetime. The only other time I
remember was the
very first output of my very first compiled language when a teenager.
This was a '<span style="color: rgb(0, 0, 153);">hello world</span>!'
on a screen. <br>

<br>

Subsequent events fade into boredom and indifference. And that
wonderment gets forgotten, especially as languages and systems become
monotonously similar as the years go by.<br>

<br>

But that feeling came back (surprisingly) as I replicated the above
example from a native c-binary when ran from a<br>

basic! terminal app on my Android phone.&nbsp; <span style="color: rgb(0, 0, 153); font-style: italic;">'The phone is
running 'c' made code !'&nbsp; </span>For a few brief minutes, I was
again a teenager.<br>

<br>

I don't know wether it was because of my usual bias against Java
running android phones, or that I had forgotten that a phone was really
just a small sized PC, or that I had mentally placed NDK as just
another mass of geeky <br>

dependent-hell files that don't really work for 'normal' people.
But that the binary actually ran, freaked me out and gave me quite a
buzz for the rest of the day.<br>

<br>

<big><big>T</big></big>his guide is simply about how to make a native
binary and run it from rfo-basic.<br>

If you can get that 'hello world' moment too, then you have my
permission to take the day off and buy yourself a drink.<br>

<br>

<span style="text-decoration: underline;">Preliminaries</span><br>

It is assummed you are familiar with;<br>

a) rfo-basic<br>

b) the c language and compilers<br>

c) OS terminals and scripts (windows or linux) and filenames.<br>

<br>

In this guide, we will be using the c/c++ language and our host PC is
running linux. If you are using windows,<br>

just convert the filepaths/names and script commands accordingly.<br>

<br>

<hr style="width: 100%; height: 2px;"><br>

<big><span style="text-decoration: underline;"><a name="What_is_NDK"></a>What
is NDK?</span></big><big><big><br>
</big><span style="text-decoration: underline;"></span></big>The
Android <span style="color: rgb(0, 0, 153);">Native Development Kit</span>
is primarily a system of building cross
compiled binaries of other languages to interface with Android's OS
(which runs on Java). It relies heavily on using JNI as an interface to
make library calls in-between the running binary and Java. But as you
might have noticed, this website (about rfo-basic) avoids
Java/XML due to it's complexities. So why use NDK at all?<br>

<br>

<big style="text-decoration: underline;"><a name="Why_Use_It"></a>Why
Use It ?</big><br>

It so happens that you can still compile NDK binaries and have them <span style="color: rgb(0, 0, 153);">execute</span> <span style="color: rgb(102, 0, 0);">without</span> JNI as long as you don't
call the Java libraries. Such needs are typically tasks which are cpu
intensive and <span style="color: rgb(0, 0, 153);">don't need graphics
or any other user interaction</span>.
e.g Background or service utilties e.g servers, batch file operations,
or self contained utitlities which have already been proven and written
in other languages.<br>

<br>

<big><span style="text-decoration: underline;"><a name="Simple_Interface"></a>Simple Interface</span></big><br>

All we need to do is to find a way to <span style="text-decoration: underline;">execute</span> and perhaps devise
a simple way for the binary to <span style="text-decoration: underline;">talk</span> to the basic! program.<br>

<br>

Execution is not a problem, Basic! already has a built-in shell in the
form of the <span style="color: rgb(0, 102, 0);">system.</span>
command, of which we can use to <span style="color: rgb(0, 0, 153);">launch</span>
the binary.<br>

<br>

The next requirement is <span style="color: rgb(0, 0, 153);">somewhere
to put the binary</span>, where we can give it permissions to execute.<br>

All android apps are entitled a private area of storage called <span style="color: rgb(0, 0, 153);">Primary Internal Private Storage</span>.
This is usually at location <span style="color: rgb(102, 0, 0);">/data/data/&lt;package_name&gt;</span>.
It is created when the app is installed. The app has full rights here,
so putting the binary here means we can give it the <span style="text-decoration: underline;">right to execute</span>.
Another bonus, is that the directory is wiped when the app is
uninstalled.<br>

<br>

For communication between the binary and basic!, you can either use a
protocol of read/write to temporary files, or alternatively monitor the
stdin/stdout of the shell/binary.<br>

<br>

<hr style="width: 100%; height: 2px;"><big style="text-decoration: underline;"><br>
<a name="Make_a_Binary"></a>Make a Binary</big><br>

<br>

But first things first, let's see how we can build an actual binary
with NDK.<br>

<br>

The development environment is more simple than you think. There is no
special IDE, no drivers to install and you can install to anywhere you
want. You don't even have to set any environment variables if you don't
want. Configuration It is mostly setting values inside
provided scripts.<br>

<br>

<br>

1. Download the latest <a href="https://developer.android.com/ndk/downloads/index.html">NDK
distribution</a>.<br>

<br>

<div style="margin-left: 40px;">The NDK distro is a gigantic collection
of compilers and toolchains (utilities for compilation) and examples
that cater for windows, linux and mac. <br>
Pick the distro that matches your development PC.<br>
Download and run the self-extracter which will extract a tree of files
to a directory of your choice.<br>
</div>

<br>

2. Check for build script <span style="color: rgb(0, 102, 0);">ndk-build</span>.<br>

<br>

<div style="margin-left: 40px;">In the main directory there is script
file called '<span style="color: rgb(0, 102, 0);">ndk-build</span>'<br>
<br>
This is the main script to call for compilation. Note it's location,
you will need it for later.<br>
<br>
(For windows, you can use '<span style="color: rgb(0, 102, 0);">ndk-build.cmd</span>'
otherwise you need to install cygwin to be able to use the linux script)<br>
</div>

<br>

3. Navigate to the standalone example file.<br>

<br>

<div style="margin-left: 40px;">Open a terminal and cd into <span style="color: rgb(102, 0, 0);">tests/standalone/basic-c-compile/jni/</span><br>
</div>

<div style="text-align: right; margin-left: 40px;"><small>(although we
won't use jni, this is the standard sub-directory structure.)</small><br>
</div>

<div style="margin-left: 40px;"><br>
This is where the source files and makefile go, and where we will be operating from.<br>
<br>
You will find a file called <span style="color: rgb(0, 0, 153);">main.c</span>
which is the 'hello world' c example.<br>
<div class="bordered"><small><span style="font-family: monospace;">#include &lt;stdio.h&gt;</span></small><br style="font-family: monospace;">
<br style="font-family: monospace;">
<small><span style="font-family: monospace;">int main()</span></small><br style="font-family: monospace;">
<small><span style="font-family: monospace;">{&nbsp; </span></small><br style="font-family: monospace;">
<small><span style="font-family: monospace;">&nbsp;printf ("hello world\n");</span></small><br style="font-family: monospace;">
<br style="font-family: monospace;">
<small><span style="font-family: monospace;">&nbsp;return 0;</span></small><br style="font-family: monospace;">
<small><span style="font-family: monospace;">}</span></small><br style="font-family: monospace;">
</div>
<br>
Now we check if a makefile is here..<br>
</div>

<br>

4. Create <span style="color: rgb(0, 0, 153);">Android.mk</span><br>

<br>

<div style="margin-left: 40px;">Below is the makefile. If one is not
provided, create this one (infact, you should probably use this one);<br>
<br>
Android.mk<br></div>
<div class="bordered" style="margin-left: 40px;"><small><span style="font-family: monospace;">LOCAL_PATH:= $(call my-dir)</span><br style="font-family: monospace;">
<span style="font-family: monospace;">include $(CLEAR_VARS)</span><br style="font-family: monospace;">
<br style="font-family: monospace;">
<span style="font-family: monospace;">LOCAL_MODULE := <span style="color: rgb(0, 102, 0);">main</span></span><br style="font-family: monospace;">
<br style="font-family: monospace;">
<span style="font-family: monospace; color: rgb(102, 51, 0);">#APP_PLATFORM := android-16</span><br style="color: rgb(102, 51, 0); font-family: monospace;">
<span style="font-family: monospace; color: rgb(102, 51, 0);">#LOCAL_CFLAGS += -fPIE</span><br style="color: rgb(102, 51, 0); font-family: monospace;">
<span style="font-family: monospace; color: rgb(102, 51, 0);">#LOCAL_LDFLAGS += -fPIE -pie</span><br style="font-family: monospace;">
<br style="font-family: monospace;">
<span style="font-family: monospace;">LOCAL_SRC_FILES:= <span style="color: rgb(0, 0, 153);">main.c</span></span><br style="font-family: monospace;">
<br style="font-family: monospace;">
<span style="font-family: monospace;">include $(BUILD_EXECUTABLE)</span></small>





















<small><span style="font-family: monospace;"></span></small><br>
</div>
<div style="margin-left: 40px;">
<br>
This makefile takes one source file <span style="color: rgb(0, 0, 153);">main.c</span>, it will compile and link
it with android's <span style="color: rgb(0, 0, 153);">bionic</span>
library <small>(a cut down version of the standard c library for
android)</small>, and generate a binary called <span style="color: rgb(0, 102, 0);">main</span>.<br>
<br>
In the middle of the makefile are <span style="color: rgb(102, 51, 0);">3
commented lines.</span> The 3 lines determine wether PIE is turned on
or off. <small><span style="font-family: monospace;"><br>
<small><span style="color: rgb(102, 51, 0);">#APP_PLATFORM := android-16</span><br style="color: rgb(102, 51, 0);">
<span style="color: rgb(102, 51, 0);">
#LOCAL_CFLAGS += -fPIE</span><br style="color: rgb(102, 51, 0);">
<span style="color: rgb(102, 51, 0);">
#LOCAL_LDFLAGS += -fPIE -pie</span></small></span></small><br>
<small><span style="color: rgb(0, 0, 153);"></span></small><br>
<span style="color: rgb(102, 51, 0);">#commented</span> = <span style="color: rgb(0, 0, 153);">PIE disabled ( off )<br>
</span>un-commented = <span style="color: rgb(0, 0, 153);">PIE enabled
( on )<br>
</span><br>
<span style="color: rgb(0, 0, 153);"></span>If your Android phone
version is <span style="color: rgb(0, 0, 153);">JellyBean or later
(4.1+) i.e api16+, then </span>un-comment <span style="color: rgb(0, 0, 153);">the lines </span>(PIE on).<br>
If your Android phone version is older, i.e is less than 4.1,&nbsp;
then <span style="color: rgb(102, 51, 0);">#comment the lines</span>
out (PIE Off)<br>
<br>
(see later for explanation of PIE)<br>
</div>


<br>

5. Create a compile script.<br>

<br>

<div style="margin-left: 40px;">In this directory, create a script
called <span style="color: rgb(0, 102, 0);">go.sh</span> (or go.cmd)
and type in the path to the main build script ndk-build. e.g<br>
<br>
<span style="color: rgb(0, 102, 0);">go.sh</span><br>
<div style="margin-left: 40px;"><span style="color: rgb(102, 51, 0);">/mnt/sda4/dev/android-ndk-r10d/</span><span style="color: rgb(0, 102, 0);">ndk-build</span><span style="color: rgb(102, 51, 0);"></span><br>
<span style="color: rgb(102, 51, 0);"></span></div>
<span style="color: rgb(102, 51, 0);"><br>
</span>This means you can run this script instead of setting up
environment variables with a path.<br>
You will run '<span style="color: rgb(0, 102, 0);">go.sh</span>'
whenever you need to compile in this directory.<br>
</div>

<br>

5. Compile<br>

<br>

<div style="margin-left: 40px;">Run the compile script <span style="color: rgb(0, 102, 0);">./go.sh</span><br>
This should generate any executables inside <span style="color: rgb(102, 0, 0);">../libs/armeabi/</span><br>
<span style="color: rgb(102, 0, 0);"></span>i.e <span style="color: rgb(102, 0, 0);">../libs/armeabi/</span><span style="color: rgb(0, 102, 0);">main</span><br>
<small>(It will also generate some files in ../obj/local/armeabi/ but
we aren't interested in those.)</small><br>
<br>
<span style="color: rgb(0, 102, 0);">main</span> is the binary
executable which you will copy to your phone (see later).<br>
</div>

<br>

<hr style="width: 100%; height: 2px;"><br>

<big><span style="text-decoration: underline;"><a name="Your_Basic_project"></a>Your Basic! project</span></big><br>

<br>

For editor mode, the <span style="color: rgb(102, 0, 0);">package_name</span>
is "<span style="color: rgb(102, 51, 0);">com.rfo.basic</span>".<span style="color: rgb(102, 0, 0);"></span><br>

For Apk, the package name is whatever you named your package(<small>with
your apk builder</small>),<br>

<br>

For both cases, the project directory will be <span style="color: rgb(102, 0, 0);">/mnt/sdcard/&lt;package_name&gt;/<br>
</span>
<br>

1. Copy the <span style="text-decoration: underline; color: rgb(0, 102, 0);">binary</span>
you compiled to your <span style="color: rgb(102, 0, 0);">&lt;&gt;/data</span>
directory. e.g <span style="color: rgb(102, 0, 0);">/mnt/sdcard/rfo-basic/data/</span><span style="color: rgb(0, 102, 0);">main</span><br>

<br>

2. In your program, initialise the basic shell and go to private
storage <span style="color: rgb(102, 0, 0);">/data/data/&lt;package_name&gt;<br>
</span>
<div class="bordered" style="margin-left: 40px;"><small style="color: rgb(0, 0, 153);"><span style="font-family: monospace;">p$="<span style="color: rgb(102, 51, 0);">com.rfo.basic</span>"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<span style="color: rgb(102, 102, 102);">% package name</span></span></small><br style="font-family: monospace;">
<small style="color: rgb(0, 0, 153);">
<span style="font-family: monospace;">path$ = "<span style="color: rgb(102, 0, 0);">/data/data/</span>"+p$+"/"</span></small><br style="font-family: monospace;">
<small style="color: rgb(0, 0, 153);">
<span style="font-family: monospace;">system.open</span></small><br style="font-family: monospace;">
<small style="color: rgb(0, 0, 153);">
<span style="font-family: monospace;">system.write "cd "+ path$+"
2&gt;&amp;1"</span></small><br style="font-family: monospace;">
<small style="color: rgb(0, 0, 153);">
<span style="font-family: monospace;">pause 50</span></small><br>
</div>



<br>
3. Copy over the binary to private storage<br>

<div class="bordered" style="margin-left: 40px; color: rgb(102, 51, 0);"><small><span style="color: rgb(0, 0, 153); font-family: monospace;"><span style="color: rgb(0, 102, 0);">b$</span>="<span style="color: rgb(0, 102, 0);">main</span>"&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <span style="color: rgb(102, 102, 102);">% binary name</span><br>
file.root datapath$&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(102, 102, 102);">% &lt;base&gt;/data</span></span><br style="font-family: monospace; color: rgb(0, 0, 153);">
<span style="color: rgb(0, 0, 153); font-family: monospace;">srce$ =
datapath$+"/"+b$</span><br style="font-family: monospace; color: rgb(0, 0, 153);">
<span style="color: rgb(0, 0, 153); font-family: monospace;">system.write
("cat "+srce$+" &gt;./"+b$+" 2&gt;&amp;1")</span></small><br>
</div>

<br>

4. Make the binary executable<small><br>
</small>
<div class="bordered" style="margin-left: 40px;"><small style="color: rgb(0, 0, 153);"><span style="font-family: monospace;">system.write "chmod 777 "+<span style="color: rgb(0, 102, 0);">b$</span>+" 2&gt;&amp;1"&nbsp; <span style="color: rgb(102, 102, 102);">% make executable</span></span></small><br>
</div>

<br>

5. Run It.<br>

<div class="bordered" style="margin-left: 40px;"><small><span style="color: rgb(0, 0, 153); font-family: monospace;">system.write "<span style="color: rgb(0, 102, 0);">./"+b$</span>+"
2&gt;&amp;1"&nbsp;&nbsp; <span style="color: rgb(102, 102, 102);">%
execute binary</span></span></small><br>
</div>

<br>

6. Get the Output<br>

<div class="bordered" style="margin-left: 40px;"><small style="font-family: monospace; color: rgb(0, 0, 153);">r$=""&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; <span style="color: rgb(102, 102, 102);">% assume
no reponse</span></small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">pause 100</small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">system.READ.READY
ready&nbsp;&nbsp;&nbsp;<span style="color: rgb(102, 102, 102);"> % if
response</span></small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">while
ready</small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">&nbsp;&nbsp;
&nbsp;&nbsp; system.READ.LINE l$</small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">&nbsp;&nbsp;
&nbsp;&nbsp; r$ += l$+"\n"</small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">&nbsp;&nbsp;
&nbsp;&nbsp; system.READ.READY ready</small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">repeat<br>
print r$&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(102, 102, 102);">% output</span><br>
</small></div>

<br>

7. Cleanup and close the shell<br>

<div class="bordered" style="margin-left: 40px;"><small style="font-family: monospace; color: rgb(0, 0, 153);">onBackKey:<br>
</small>
<div style="margin-left: 40px;"><small style="font-family: monospace; color: rgb(0, 0, 153);">system.close<br>
system.open<br>
system.write "cd "+ path$ + ";rm "+b$&nbsp;&nbsp; <span style="color: rgb(102, 102, 102);">% delete the binary<br>
</span></small><small style="font-family: monospace; color: rgb(0, 0, 153);">pause 100</small><br>
<small style="font-family: monospace; color: rgb(0, 0, 153);">
system.close<br>
</small></div>
<small style="font-family: monospace; color: rgb(0, 0, 153);">end<br>
</small>
</div>

<br>

When you run&nbsp; this basic program,
it should copy over and execute the binary in a shell, then spool any
output to the screen. Any shell errors will normally show by the
spooling. If all goes well, you will see "hello world" .<br>

<br>

<hr style="width: 100%; height: 2px;"><br>

<big style="text-decoration: underline;">About the Shell</big><br>

<br>

<br>
<br>
<br>
<br>
<big style="text-decoration: underline;">
<br>
</big><big style="text-decoration: underline;">About the PIE<br>
<br>
<br>
<br>
</big><big style="text-decoration: underline;">
Communication</big><br>

<br>

So far we have been able to<br>

<br>

<br>

<br>

<br>

<small><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
-End.</small><br>

<hr style="width: 100%; height: 2px;"> <br>

Sources and Acknowledgements:<br>

<br>

<br>

<br>

<hr style="width: 100%; height: 2px; font-family: Helvetica,Arial,sans-serif;">
Support my projects!<br>

<a href="../../donate.html">Donate via BitCoin</a>.<br style="font-family: Helvetica,Arial,sans-serif;">

<br style="font-family: Helvetica,Arial,sans-serif;">

<hr style="width: 100%; height: 2px; font-family: Helvetica,Arial,sans-serif;">
<br style="font-family: Helvetica,Arial,sans-serif;">

<br>

<script type="text/javascript" src="http://humpty.drivehq.com/main_index.js">
</script>
</body></html>